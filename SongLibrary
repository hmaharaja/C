#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

// A node in the linked list

// Each string in the node is declared as a character pointer variable,
// so they need to be dynamically allocated using the malloc() function,
// and deallocated using the free() function after use.

typedef struct node {
    char *artist ;
    char *songName ;
    char *genre ;
    struct node *nextNode ;
} Node;

// Declarations of functions
Node *newNode(Node *head, char nameOfSong[], char nameOfArtist[], char nameOfGenre[]);
Node *insertNodeOneBefore(Node *head, Node *createdNewNode);
Node *deleteAnyNode(Node *head, char searchedSong[]);
Node *deleteList(Node *head);
void searchSongName(Node *head, char searchedSong[]);
void insertNodeAfter(Node *head, Node *newCreatedNode);
void printLibrary(Node *head);
void inputStringFromUser( char prompt[], char s[], int arraySize ) ;
void songNameDuplicate( char songName[] ) ;
void songNameFound( char songName[] ) ;
void songNameNotFound( char songName[] ) ;
void songNameDeleted( char songName[] ) ;
void artistFound( char artist[] ) ;
void artistNotFound( char artist[] ) ;
void printMusicLibraryEmpty( void ) ;
void printMusicLibraryTitle( void ) ;


const int MAX_LENGTH = 1024;

int main( void ) {
    // Declare the head of the linked list.
	Node *head = NULL;
 
    // Program execution begins
    printf( "Personal Music Library.\n\n" );
    printf( "%s", "Commands are I (insert), D (delete), S (search by song name),\n P (print), Q (quit).\n" );
    
    char response;
    char input[ MAX_LENGTH + 1 ];
    do {
        inputStringFromUser( "\nCommand", input, MAX_LENGTH ) ;
		
        // Response is the first character entered by user.
        // Convert to uppercase to simplify later comparisons.
        response = toupper( input[0] ) ;

        if( response == 'I' )
		{
			char *promptName = "Song name" ;
            char *promptArtist =  "Artist" ;
            char *promptGenre = "Genre" ;
			char nameOfSong[MAX_LENGTH+1], nameOfArtist[MAX_LENGTH+1], nameOfGenre[MAX_LENGTH+1];
			
            //Ask the user to input the song name, artist, and genre, and store in a node
			inputStringFromUser(promptName, nameOfSong, MAX_LENGTH+1);
			inputStringFromUser(promptArtist, nameOfArtist, MAX_LENGTH+1);
			inputStringFromUser(promptGenre, nameOfGenre, MAX_LENGTH+1);
			
			Node *entry = newNode(head, nameOfSong, nameOfArtist, nameOfGenre);
			
			//Insert the new created node into the linked list
			if(head !=NULL)
			{
				if (strcmp(entry->songName, head->songName)>0) //string compare is greater than 0, then insert node after (at tail)
				{
					Node *nodeCurrent = head;
					while(strcmp(entry->songName, head->songName)>0 && (nodeCurrent->nextNode!=NULL))
						nodeCurrent = nodeCurrent->nextNode;
					insertNodeAfter(nodeCurrent, entry);
				}

				else if(strcmp(entry->songName, head->songName)<0) //string compare has to be less than 0, insert node before (at front)
					head = insertNodeOneBefore(head, entry);
					
				else //string compare is equal to 0, this means entry is a duplicate of an existing song
					songNameDuplicate(entry->songName);
			}
			
			else if(head == NULL) //Make the entry the first node in the list if the list is empty
				head = entry;
        }
        else if( response == 'D' ) //Delete a song from the list 
		{
            char *prompt = "\nEnter the name of the song to be deleted";
			
            //Obtains the name of the song the user wants to delete and assigns it to a string 
			inputStringFromUser(prompt, input, MAX_LENGTH+1); 
			char *songToDelete = (char *)malloc(sizeof(char)*strlen(input));
			strcpy(songToDelete, input);
			
			//Search for the node that contains the song to be deleted 
			if(head==NULL);
			else 
				head = deleteAnyNode(head,songToDelete);
        }
        else if( response == 'S' ) // Search for a song by its name.
		{
            char *prompt = "\nEnter the name of the song to search for" ;
			char songNameSearch[MAX_LENGTH+1];
			inputStringFromUser(prompt, songNameSearch, MAX_LENGTH+1);
			searchSongName(head,songNameSearch);
        }
        else if( response == 'P' ) //Print the entire exiting music library (the linked list)
		{
			if(head==NULL)
				printMusicLibraryEmpty(); //If the music library is empty, print an error message
			else
			{ 
				printMusicLibraryTitle(); //Print the "my music library:" heading
				printLibrary(head);       //Call the function to print the information in every node in the list 
			}
        }
        else if( response == 'Q' ); //This is the exit command (exit the while loop)

        else 
            printf( "\nInvalid command.\n" ); //Only executes if no other command is matched and executed 
    } while( response != 'Q' ); 
  
    // Delete the entire linked list.
	while(head!=NULL)
		head = deleteAnyNode(head, head->songName);

    // Print the linked list to confirm deletion.
	printLibrary(head);
	if(head==NULL)
		printMusicLibraryEmpty();

    return 0 ;
}

// Support Function Definitions

// Prompt the user for a string safely, without buffer overflow
void inputStringFromUser(char prompt[], char s[], int maxStrLength) {
    int i = 0;
    char c;
    
    printf( "%s --> ", prompt ) ;
    while( i < maxStrLength && (c = getchar()) != '\n' )
        s[i++] = c ;
    s[i] = '\0' ;
}

// Function to call when the user is trying to insert a song name 
// that is already in the personal music library.
void songNameDuplicate( char songName[] ) {
    printf( "\nA song with the name '%s' is already in the music library.\n"
            "No new song entered.\n", songName);
}

// Function to call when a song name was found in the personal music library.
void songNameFound( char songName[] ) {
    printf( "\nThe song name '%s' was found in the music library.\n",
           songName ) ;
}

// Function to call when a song name was not found in the personal music library.
void songNameNotFound( char songName[] ) {
    printf( "\nThe song name '%s' was not found in the music library.\n", songName);
}

// Function to call when a song name that is to be deleted
// was found in the personal music library.
void songNameDeleted( char songName[] ) {
    printf( "\nDeleting a song with name '%s' from the music library.\n", songName);
}

// Function to call when printing an empty music library.
void printMusicLibraryEmpty(void) {
    printf( "\nThe music library is empty.\n" ) ;
}

// Function to call to print a title when the entire music library is printed.
void printMusicLibraryTitle(void) {
    printf( "\nMy Personal Music Library: \n" );
}

Node *newNode(Node *head, char nameOfSong[], char nameOfArtist[], char nameOfGenre[]) //Creates a new node for each user input
{
	Node *userSong = (Node *) malloc(sizeof(Node)); //Allocates memory that is the size of the node so that everything can be stored
	userSong -> songName = (char*) malloc(sizeof(char)*strlen(nameOfSong));
	userSong -> artist = (char *) malloc(sizeof(char)*strlen(nameOfArtist));
	userSong -> genre = (char *) malloc(sizeof(char)*strlen(nameOfGenre));
	if(userSong!=NULL)
	{	
		//Gets the song name from the user and stores it into the node
		strcpy(userSong->songName, nameOfSong);
		
		//Gets the artist from the user and stores it into the node
		strcpy(userSong->artist, nameOfArtist);
		
		//Gets the genre from the user and stores it into the node 
		strcpy(userSong->genre, nameOfGenre); 
		
		userSong->nextNode = head; 
	}
	return userSong;
}

Node *insertNodeOneBefore(Node *head, Node *createdNewNode) //Inserts a node at the front (top) of the linked list 
{
	createdNewNode->nextNode = head;
	head = createdNewNode;
	return head; 
}

void insertNodeAfter(Node *head, Node *newCreatedNode) //Inserts a node after another node 
{
	newCreatedNode->nextNode = head->nextNode;
    head->nextNode = newCreatedNode;
}

void printLibrary(Node *head) //Goes through the linked list and prints all exiting items
{
	Node *currentNode = head;
	while(currentNode!=NULL)
	{
		printf("%s\n%s\n%s\n\n", currentNode->songName, currentNode->artist, currentNode->genre);
		currentNode = currentNode->nextNode;
	}
}

void searchSongName(Node *head, char searchedSong[]) //Looks for an inputted song by its name in the linked list 
{
	Node *current = head; 
	bool songExists = false; 
	while(current != NULL) //While the linked list is not empty
	{
		if(strcmp(searchedSong, current->songName)==0) //If the song name stored in any node matched the song inquiry, set flag to true
			songExists = true;
		current = current->nextNode; //Move to the next node in the list
	}
	if(songExists == false) //If no node had the same song name as the inquiry, it is not there, so print error message
		songNameNotFound(searchedSong);
	else 
		songNameFound(searchedSong); //The song was found, so print that it exists in the library 
}

Node *deleteAnyNode(Node *head, char searchedSong[])
{
	Node *previousNode = head;
	Node *current = head->nextNode;
	
	if(strcmp(searchedSong, previousNode->songName)==0)
	{
		if(current==NULL)
		{
			songNameDeleted(searchedSong);
			free(previousNode->songName);
			free(previousNode->artist);
			free(previousNode->genre);
			free(previousNode);
			return NULL;
		}
		else
		{
			songNameDeleted(searchedSong);
			free(previousNode->songName);
			free(previousNode->artist);
			free(previousNode->genre);
			free(previousNode);
			return current;
		}
	}
		
	while(strcmp(searchedSong, current->songName)!=0 && (current!=NULL))
	{
		current = current->nextNode;
		previousNode = previousNode->nextNode;
	}
	
	if(strcmp(searchedSong, current->songName)==0)
	{
		songNameDeleted(searchedSong);
		free(current->songName);
		free(current->artist);
		free(current->genre);
		previousNode->nextNode = current->nextNode;
		free(current);
	}
	else 
		songNameNotFound(searchedSong);
	return head;
}
